{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["searchClient","algoliasearch","CustomHit","hit","key","objectID","className","src","img","alt","name","style","fontSize","fontWeight","Highlight","attribute","type","map","i","toLowerCase","height","weight","weaknesses","weakness","App","InstantSearch","indexName","display","color","marginBottom","SearchBox","placeholder","autoFocus","Configure","hitsPerPage","ClearRefinements","RefinementList","CurrentRefinements","Hits","hitComponent","Pagination","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAeMA,E,MAAeC,GACnB,aACA,oCAGIC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OAChB,yBAAKC,IAAKD,EAAIE,SAAUC,UAAU,YAChC,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,YAAYC,IAAKJ,EAAIK,IAAKC,IAAKN,EAAIO,QAEpD,yBAAKJ,UAAU,yBACb,6BACE,0BAAMK,MAAO,CAAEC,SAAU,OAAQC,WAAY,SAA7C,IACG,kBAACC,EAAA,EAAD,CAAWC,UAAU,MAAMZ,IAAKA,IAAQ,KAE3C,kBAACW,EAAA,EAAD,CAAWC,UAAU,OAAOZ,IAAKA,IACjC,0BAAMG,UAAU,SACbH,EAAIa,KAAKC,KAAI,SAACD,EAAME,GAAP,OACZ,0BAAMd,IAAKc,EAAGZ,UAAS,UAAKU,EAAKG,cAAV,UACrB,kBAACL,EAAA,EAAD,CAAWC,UAAS,eAAUG,EAAV,KAAgBf,IAAKA,UAKjD,yBAAKG,UAAU,SACb,sCADF,IACkBH,EAAIiB,OADtB,KAGA,yBAAKd,UAAU,SACb,sCADF,IACkBH,EAAIkB,OADtB,MAGA,yBAAKf,UAAU,cACb,6BACE,2CAEDH,EAAImB,WAAWL,KAAI,SAACM,EAAUL,GAAX,OAClB,0BAAMd,IAAKc,EAAGZ,UAAS,UAAKiB,EAASJ,cAAd,UACrB,kBAACL,EAAA,EAAD,CAAWC,UAAS,qBAAgBG,EAAhB,KAAsBf,IAAKA,YA+C5CqB,EAvCH,WACV,OACE,8BACE,kBAACC,EAAA,EAAD,CAAezB,aAAcA,EAAc0B,UAAU,WACnD,yBAAKpB,UAAU,UACb,yBAAKK,MAAO,CAACgB,QAAS,UACpB,wBAAIhB,MAAO,CAAEiB,MAAO,YAApB,kBAEF,yBAAKjB,MAAO,CAACgB,QAAS,QAASE,aAAc,SAC7C,kBAACC,EAAA,EAAD,CACEC,YAAa,wCACbzB,UAAU,0BACV0B,WAAS,MAIb,yBAAK1B,UAAU,aACb,kBAAC2B,EAAA,EAAD,CAAWC,YAAa,IACxB,yBAAK5B,UAAU,kBACf,yBAAKA,UAAU,eACb,kBAAC6B,EAAA,EAAD,MADF,kBAGE,kBAACC,EAAA,EAAD,CAAgBrB,UAAU,SAH5B,sBAKE,kBAACqB,EAAA,EAAD,CAAgBrB,UAAU,gBAG5B,yBAAKT,UAAU,gBACb,kBAAC+B,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMC,aAAcrC,IACpB,kBAACsC,EAAA,EAAD,WC7EQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae6322a0.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  InstantSearch,\n  SearchBox,\n  RefinementList,\n  Hits,\n  ClearRefinements,\n  Configure,\n  Pagination,\n  CurrentRefinements,\n  NumericMenu,\n  Highlight\n} from \"react-instantsearch-dom\";\nimport algoliasearch from \"algoliasearch/lite\";\n\nconst searchClient = algoliasearch(\n  \"X55AEDZ16K\",\n  \"1c3d24863ec3c1851b13bc947d238fd4\"\n);\n\nconst CustomHit = ({ hit }) => (\n  <div key={hit.objectID} className=\"hit-item\">\n    <div className=\"hit-image-container\">\n      <img className=\"hit-image\" src={hit.img} alt={hit.name} />\n    </div>\n    <div className=\"hit-content-container\">\n      <div>\n        <span style={{ fontSize: \"12px\", fontWeight: \"bold\" }}>\n          #<Highlight attribute=\"num\" hit={hit} />{\" \"}\n        </span>\n        <Highlight attribute=\"name\" hit={hit} />\n        <span className=\"types\">\n          {hit.type.map((type, i) => (\n            <span key={i} className={`${type.toLowerCase()} pill`}>\n              <Highlight attribute={`type[${i}]`} hit={hit} />\n            </span>\n          ))}\n        </span>\n      </div>\n      <div className=\"stats\">\n        <b>Height:</b> {hit.height}m\n      </div>\n      <div className=\"stats\">\n        <b>Weight:</b> {hit.weight}kg\n      </div>\n      <div className=\"weaknesses\">\n        <div>\n          <b>Weaknesses:</b>\n        </div>\n        {hit.weaknesses.map((weakness, i) => (\n          <span key={i} className={`${weakness.toLowerCase()} pill`}>\n            <Highlight attribute={`weaknesses[${i}]`} hit={hit} />\n          </span>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nconst App = () => {\n  return (\n    <main>\n      <InstantSearch searchClient={searchClient} indexName=\"pokemon\">\n        <div className=\"header\">\n          <div style={{display: \"block\"}}>\n            <h1 style={{ color: \"#FFCC03\"}}>Pok√©Search</h1>\n          </div>\n          <div style={{display: \"block\", marginBottom: \"20px\"}}>\n          <SearchBox\n            placeholder={\"Start typing to search for Pokemon...\"}\n            className=\"custom-search-container\"\n            autoFocus\n          />\n          </div>\n        </div>\n        <div className=\"container\">\n          <Configure hitsPerPage={8} />\n          <div className=\"search-header\"></div>\n          <div className=\"left-column\">\n            <ClearRefinements />\n            Filter by Type:\n            <RefinementList attribute=\"type\" />\n            Filter by Weakness:\n            <RefinementList attribute=\"weaknesses\" />\n            {/* <NumericMenu at /> */}\n          </div>\n          <div className=\"right-column\">\n            <CurrentRefinements />\n            <Hits hitComponent={CustomHit} />\n            <Pagination />\n          </div>\n          {/* <div className=\"center\">container</div> */}\n        </div>\n      </InstantSearch>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}